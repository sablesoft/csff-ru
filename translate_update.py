#!/usr/bin/env python3

import csv
import os
import sys
import time
import openai
from datetime import datetime
from pathlib import Path

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
CHUNK_SIZE = 50
DELIMITER = "|"
DEBUG_DIR = "debug"
PROMPT_FILE = "prompt.txt"
RESUME_FILE = os.path.join(DEBUG_DIR, "resume_state.txt")

# === API –ú–û–î–ï–õ–¨ ===
MODEL = "gpt-4o"
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    print("‚ùå Set OPENAI_API_KEY in environment.")
    sys.exit(1)

# === –í–•–û–î–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===
if len(sys.argv) != 3:
    print("Usage: python translate_full_file.py <source.csv> <lang_code>.csv")
    sys.exit(1)

src_file = sys.argv[1]
dst_file = sys.argv[2]

# === –Ø–ó–´–ö ===
lang_code = Path(dst_file).stem.split("-")[0]
date_str = datetime.now().strftime("%Y%m%d")
output_file = f"{lang_code}-{date_str}.csv"

os.makedirs(DEBUG_DIR, exist_ok=True)
translated_rows = []

# === –ó–ê–ì–†–£–ó–ö–ê CSV ===
with open(src_file, newline='', encoding='utf-8') as f:
    reader = list(csv.reader(f))
    print(f"üìÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(reader)} —Å—Ç—Ä–æ–∫ –∏–∑ {src_file}")

# === –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–ú–ü–¢–ê ===
with open(PROMPT_FILE, encoding='utf-8') as f:
    prompt_template = f.read()

# === –ó–ê–ì–†–£–ó–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø RESUME ===
resume_index = 0
if os.path.exists(RESUME_FILE):
    with open(RESUME_FILE) as f:
        resume_index = int(f.read().strip())
        print(f"üîÅ –†–µ–∂–∏–º resume: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —á–∞–Ω–∫–∞ #{resume_index}")

if resume_index == 0 and os.path.exists(output_file):
    os.remove(output_file)

# === –ß–ê–ù–ö–ò–ù–ì ===
chunks = [reader[i:i + CHUNK_SIZE] for i in range(0, len(reader), CHUNK_SIZE)]

for chunk_index, chunk in enumerate(chunks):
    if chunk_index < resume_index:
        continue

    print(f"\n‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {chunk_index + 1}/{len(chunks)}")

    keys, english_texts = [], []
    for row in chunk:
        if len(row) < 2:
            print(f"‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–ª–æ–Ω–æ–∫: {row}")
            sys.exit(1)
        keys.append(row[0])
        english_texts.append(row[1])

    joined_input = DELIMITER.join(english_texts)
    debug_input_file = f"{DEBUG_DIR}/batch_{chunk_index:03d}_input.txt"
    debug_output_file = f"{DEBUG_DIR}/batch_{chunk_index:03d}_output.txt"

    # === –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ===
    if os.path.exists(debug_output_file):
        print(f"‚ö°Ô∏è –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: batch_{chunk_index:03d}_output.txt")
        with open(debug_output_file, encoding='utf-8') as f:
            translated_text = f.read()
    else:
        try:
            prompt = prompt_template.replace("{lang}", lang_code).replace("{sep}", DELIMITER)
            client = openai.OpenAI(api_key=api_key)
            response = client.chat.completions.create(
                model=MODEL,
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": joined_input}
                ],
                temperature=0.3
            )
            translated_text = response.choices[0].message.content
            with open(debug_output_file, "w", encoding='utf-8') as f:
                f.write(translated_text)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ {chunk_index}: {e}")
            sys.exit(1)

    translated_lines = translated_text.split(DELIMITER)
    debug_summary = f"""
        üîé Batch: {chunk_index}
        üîë Keys: {keys}
        üìÖ Input lines: {len(english_texts)}
        üì§ Translated lines: {len(translated_lines)}
        """

    if len(english_texts) <= 10:
        for i in range(len(translated_lines)):
            en = english_texts[i] if i < len(english_texts) else "<missing>"
            tr = translated_lines[i] if i < len(translated_lines) else "<missing>"
            debug_summary += f"\n{i+1:02d}. EN: {en}\n    TR: {tr}"

    with open(f"{DEBUG_DIR}/batch_{chunk_index:03d}_debug_summary.txt", "w", encoding="utf-8") as f:
        f.write(debug_summary)

    if len(translated_lines) != len(english_texts):
        print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫: {len(english_texts)} ‚Üí {len(translated_lines)}")
        print("üìÇ –ü—Ä–æ–≤–µ—Ä—å debug/ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")
        sys.exit(1)

    for i in range(len(chunk)):
        row = chunk[i]
        translated_row = [row[0], row[1], translated_lines[i]]
        translated_rows.append(translated_row)

    # === –°–û–•–†–ê–ù–Ø–ï–ú –ü–†–û–ì–†–ï–°–° ===
    with open(output_file, "a", encoding='utf-8', newline='') as f:
        writer = csv.writer(f, quoting=csv.QUOTE_MINIMAL)
        for i in range(len(chunk)):
            row = chunk[i]
            translated_row = [row[0], row[1], translated_lines[i]]
            writer.writerow(translated_row)

    with open(RESUME_FILE, "w") as f:
        f.write(str(chunk_index + 1))

print(f"\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω: {output_file}")
print("üìÇ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã: debug/")
